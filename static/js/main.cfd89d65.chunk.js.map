{"version":3,"sources":["component/TabSection.js","data.js","component/Searchbox.js","App.js","serviceWorker.js","index.js","image/logo.jpg"],"names":["CustomTabs","withStyles","root","borderBottom","indicator","backgroundColor","Tabs","CustomTab","theme","textTransform","minWidth","fontWeight","typography","fontWeightRegular","marginRight","spacing","color","opacity","fontWeightMedium","selected","props","Tab","disableRipple","TabSection","React","useState","value","setValue","Grid","container","item","xs","onChange","event","newValue","aria-label","label","Searchbox","result","data","time","inputValue","setInputValue","content","visibleContnet","expanded","setExpanded","src","logo","e","onRequestSearch","toLowerCase","fontSize","map","className","title","url","id","table","key","Accordion","panel","isExpanded","AccordionSummary","expandIcon","aria-controls","Typography","AccordionDetails","tag","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message","module","exports"],"mappings":"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","file":"static/js/main.cfd89d65.chunk.js","sourcesContent":["import React from 'react'\r\nimport Tabs from '@material-ui/core/Tabs';\r\nimport Tab from '@material-ui/core/Tab';\r\nimport { withStyles } from '@material-ui/core/styles';\r\nimport Grid from '@material-ui/core/Grid';\r\nconst CustomTabs = withStyles({\r\n    root: {\r\n      borderBottom: '1px solid #e8e8e8',\r\n    },\r\n    indicator: {\r\n      backgroundColor: '#1890ff',\r\n    },\r\n})(Tabs);\r\n  \r\nconst CustomTab = withStyles((theme) => ({\r\n    root: {\r\n      textTransform: 'none',\r\n      minWidth: 0,\r\n      fontWeight: theme.typography.fontWeightRegular,\r\n      marginRight: theme.spacing(1),\r\n      '&:hover': {\r\n        color: '#40a9ff',\r\n        opacity: 1,\r\n      },\r\n      '&$selected': {\r\n        color: '#1890ff',\r\n        fontWeight: theme.typography.fontWeightMedium,\r\n      },\r\n      '&:focus': {\r\n        color: '#40a9ff',\r\n      },\r\n    },\r\n    selected: {},\r\n}))((props) => <Tab disableRipple {...props} />);\r\n\r\nfunction TabSection() {\r\n    const [value, setValue] = React.useState(0);\r\n    const handleChange = (event, newValue) => {\r\n        setValue(newValue);\r\n    };\r\n    return (\r\n        <>\r\n        <Grid container spacing={3}>\r\n            <Grid item xs={8}>\r\n                <CustomTabs value={value} onChange={handleChange} aria-label=\"ant example\">\r\n                    <CustomTab label=\"All\" />\r\n                    <CustomTab label=\"Images\" />\r\n                    <CustomTab label=\"News\" />\r\n                    <CustomTab label=\"Videos\" />\r\n                    <CustomTab label=\"More\" />\r\n                </CustomTabs>\r\n            </Grid>\r\n            <Grid item xs={4}>\r\n                <CustomTabs aria-label=\"ant example\">\r\n                    <CustomTab label=\"Settings\" />\r\n                    <CustomTab label=\"Tools\" />\r\n                </CustomTabs>\r\n            </Grid>\r\n        </Grid>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default TabSection\r\n","var data = [\r\n    {\r\n        \"title\" : \"Elements of Google Search Engine Results Page•SEO for beginners...\",\r\n        \"url\" : \"https://yoast.com › SEO blog › SEO basics\",\r\n        \"content\" : `Feb 26, 2018 - If you Google something you 'll end up on the Google Search Engine Results Page.\r\n            What does this page show? Which elements do you see, ...`,\r\n        \"table\" : {\r\n            \"content\": [\r\n                {\r\n                    \"title\":\"People also ask\",\r\n                    \"content\" : \"\"\r\n                },\r\n                {\r\n                    \"title\":\"What is a Google search results page?\",\r\n                    \"content\" : \"\"\r\n                },\r\n                {\r\n                    \"title\":\"What do Google search results mean?\",\r\n                    \"content\" : \"\"\r\n                },\r\n                {\r\n                    \"title\":\"What is SERP SEO?\",\r\n                    \"content\" : \"\"\r\n                },\r\n                {\r\n                    \"title\":\"What is a snippet in Google?\",\r\n                    \"content\" : \"\"\r\n                }\r\n            ]\r\n        }\r\n    },\r\n    {\r\n        \"title\" : \"Search engine results page - Wikipedia\",\r\n        \"url\" : \"https://en.wikipedia.org/wiki/Search_engine_results_page\",\r\n        \"content\" : `Search Engine Results Pages(SERP) are the pages displayed by search engines in response... Rich\r\n        snippets are displayed by Google in the search results pages when a website contains content in\r\n        structured data markup. Structured data...`,\r\n        \"tag\": \"Components ● Search query ● Organic results ● Rich Snippets\"\r\n    },\r\n    {\r\n        \"title\" : \"2018's Guide to Google's Search Engine Results Page (SERP) - Oberlo\",\r\n        \"url\" : \"https://www.oberlo.com › Blog\",\r\n        \"content\" : `Jul 10, 2018 - These new SERP teatures - SERP is shorthand for search engine results page - have\r\n        improved the experience for users, but they're also ...`\r\n    },\r\n    {\r\n        \"title\" : \"SERP: The 2018 Guide To Google Search Engine Results\",\r\n        \"url\": \"https://ignitevisibility.com/serp/\",\r\n        \"content\":`May 1, 2018 - SERP refers to a search engine result page - the page that appears with a user 's \r\n        results when they type a search into Google(or any search ...)`\r\n    }\r\n]\r\nvar time = \"About 866,000,000 results (0.77 seconds)\"\r\nexport default {data, time};","import React, { useState } from 'react'\r\nimport SearchBar from 'material-ui-search-bar'\r\nimport TabSection from './TabSection';\r\nimport data from '../data'\r\nimport logo from '../image/logo.jpg'\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Accordion from '@material-ui/core/Accordion';\r\nimport AccordionDetails from '@material-ui/core/AccordionDetails';\r\nimport AccordionSummary from '@material-ui/core/AccordionSummary';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore';\r\nimport AppsIcon from '@material-ui/icons/Apps';\r\nimport NotificationsNoneIcon from '@material-ui/icons/NotificationsNone';\r\nimport AccountCircleIcon from '@material-ui/icons/AccountCircle';\r\n\r\nfunction Searchbox() {\r\n    //default search\r\n    const searchString = \"google search result page\"\r\n    const result = data.data\r\n    const time = data.time\r\n    const [inputValue, setInputValue] = useState(\"\")\r\n    const [content, visibleContnet] = useState(false)\r\n    const [expanded, setExpanded] = React.useState(false);\r\n    const handleChange = e => {\r\n        setInputValue(e)\r\n    }\r\n    const search = (e) => {\r\n        if(e.toLowerCase() === searchString.toLowerCase())\r\n            visibleContnet(true)\r\n        else\r\n            visibleContnet(false)\r\n    }\r\n    const accordionChange = (panel) => (event, isExpanded) => {\r\n        setExpanded(isExpanded ? panel : false);\r\n    };\r\n    const renderTable = (e) =>{\r\n        let res = e.content\r\n        return(\r\n            res.map((item, key) =>\r\n                <Accordion expanded={expanded === `panel${key}`} onChange={accordionChange(`panel${key}`)}>\r\n                    <AccordionSummary\r\n                        expandIcon={<ExpandMoreIcon />}\r\n                        aria-controls={`panel${key}`}\r\n                        id={`panel${key}`}\r\n                    >\r\n                        <Typography  >{item.title}</Typography>\r\n                    </AccordionSummary>\r\n                    <AccordionDetails>\r\n                        <Typography>{item.content}</Typography>\r\n                    </AccordionDetails>\r\n                </Accordion>\r\n            )\r\n        ) \r\n    }\r\n    return (\r\n        <div>\r\n            <Grid container spacing={1}>\r\n                <Grid item xs={2}>\r\n                    <img src={logo} />\r\n                </Grid>\r\n                <Grid item xs={8}>\r\n                    <SearchBar\r\n                        value = {inputValue}\r\n                        onChange={handleChange}\r\n                        onRequestSearch={search}\r\n                    />\r\n                </Grid>\r\n                <Grid item xs={2}>\r\n                    <AppsIcon />&nbsp;\r\n                    <NotificationsNoneIcon/>&nbsp;&nbsp;\r\n                    <AccountCircleIcon fontSize=\"large\"/>\r\n                </Grid>\r\n            </Grid>\r\n            \r\n            <TabSection />\r\n            <h4>{content && time}</h4>\r\n            <br />\r\n            { \r\n                content && \r\n                result.map(item => \r\n                <div>\r\n                    <h1 className=\"title\">{item.title}</h1>\r\n                    <p className=\"subtitle\">{item.url}</p>\r\n                    <p className=\"content\">{item.content}</p>\r\n                    <div className=\"panel-group\" id=\"accordion\">\r\n                        {(() => {\r\n                            if (item.table) \r\n                               return renderTable(item.table)\r\n                        })()}\r\n                    </div>\r\n                    <p className=\"tag\">{item.tag}</p>\r\n                    <br />\r\n                </div>)\r\n        }\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Searchbox\r\n","import React from 'react';\nimport './App.css';\nimport Searchbox from './component/Searchbox'\n\nfunction App() {\n  debugger\n  return (\n    <div className = \"container\">\n        <Searchbox />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/logo.ce621bfc.jpg\";"],"sourceRoot":""}